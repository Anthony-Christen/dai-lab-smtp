/**
 * @Authors Bouzour√®ne Ryad & Christen Anthony
 * @Date    2024-12-07
 */

package ch.heig.dai.lab.smtp;

import java.util.ArrayList;
import java.util.List;

/**
 * The EmailPrankApp class runs the email prank application. It initializes
 * the configuration loader, generates victim groups, and sends prank emails
 * using an SMTP client.
 */
public class EmailPrankApp {

    public static void main(String[] args) {
        try {
            ConfigLoader configLoader = new ConfigLoader();

            GroupGenerator groupGenerator = new GroupGenerator(
                    configLoader.getVictims(),
                    configLoader.getNbGroups()
            );

            SmtpClient smtpClient = new SmtpClient(
                    configLoader.getSmtpServerAddress(),
                    configLoader.getSmtpServerPort(),
                    configLoader.getEncoding()
            );

            smtpClient.connect();
            sendEmails(
                    generateEmails(
                            groupGenerator.generateGroups(),
                            configLoader.getMessages()
                    ),
                    smtpClient
            );
            smtpClient.quit();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }

    /**
     * Generates a list of Email objects based on the provided groups and messages.
     * Each group has one sender and multiple receivers, and a message is assigned
     * to each email.
     *
     * @param groups   the list of groups generated by the GroupGenerator.
     * @param messages the list of messages loaded from the configuration.
     * @return a list of Email objects ready to be sent.
     */
    private static List<Email> generateEmails(List<Group> groups, List<Message> messages ) {
        List<Email> emails = new ArrayList<>();
        int messageIndex = 0;

        for (Group group : groups) {
            emails.add(new Email(group.getSender(), group.getReceivers(), messages.get(messageIndex)));
            messageIndex = (messageIndex + 1) % messages.size();
        }

        return emails;
    }

    /**
     * Sends a list of emails using the specified SMTP client. This method assumes
     * the client is already connected to the SMTP server.
     *
     * @param emails     the list of emails to send.
     * @param smtpClient the SMTP client used to send the emails.
     */
    private static void sendEmails(List<Email> emails, SmtpClient smtpClient) {
        for (Email email : emails) {
            smtpClient.send(email);
        }
    }
}
